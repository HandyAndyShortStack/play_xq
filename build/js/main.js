// Generated by CoffeeScript 1.9.0
(function() {
  var $boardEl, Game, board, cellSize, drawBoard, game, getCode, getCoordinates, getPosition, placement, selectedPiece, strokeWidth;

  Game = require('chinese_chess');

  $boardEl = null;

  cellSize = 55;

  strokeWidth = 2.5;

  game = new Game;

  board = null;

  selectedPiece = null;

  drawBoard = function() {
    var coordinates, piece, _ref, _results;
    $boardEl.html('');
    board = new XiangqiViewer.Board('.test-board', cellSize, strokeWidth, false);
    _ref = game.position;
    _results = [];
    for (coordinates in _ref) {
      piece = _ref[coordinates];
      _results.push(board.place([placement(coordinates, piece)]));
    }
    return _results;
  };

  getCode = function(piece) {
    if (piece.type === 'Chariot') {
      return 'r';
    }
    if (piece.type === 'Horse') {
      return 'h';
    }
    if (piece.type === 'Elephant') {
      return 'e';
    }
    if (piece.type === 'Advisor') {
      return 'a';
    }
    if (piece.type === 'General') {
      return 'k';
    }
    if (piece.type === 'Soldier') {
      return 'p';
    }
    if (piece.type === 'Cannon') {
      return 'c';
    }
  };

  placement = function(coordinates, piece) {
    return {
      code: getCode(piece),
      red: piece.color === 'red',
      file: coordinates[0],
      rank: 9 - coordinates[2]
    };
  };

  getCoordinates = function(position) {
    return position.file + "," + (9 - position.rank);
  };

  getPosition = function(coordinates) {
    return {
      file: coordinates[0],
      rank: 9 - coordinates[2]
    };
  };

  $(function() {
    $boardEl = $('.test-board');
    drawBoard();
    return $(document.body).on('click', function(event) {
      var $el, coordinates, file, legalMoves, move, position, rank, _i, _len, _ref, _ref1, _results;
      $boardEl.find('circle').remove();
      $el = $(event.target);
      rank = $el.data('rank');
      file = $el.data('file');
      if (isNaN(Number(rank) || isNaN(Number(file)))) {
        selectedPiece = null;
        return true;
      }
      position = {
        rank: rank,
        file: file
      };
      coordinates = getCoordinates(position);
      legalMoves = game.legalMoves;
      if ($el.data('highlight')) {
        if (!selectedPiece) {
          return false;
        }
        if (selectedPiece.square.coordinates === coordinates) {
          return false;
        }
        game.move(selectedPiece.square.coordinates, coordinates);
        drawBoard();
        if (game.isCheckmate) {
          return alert('checkmate');
        } else if (game.position.isCheck) {
          return alert('check');
        }
      } else if (((_ref = game.position[coordinates]) != null ? _ref.color : void 0) === game.position.toMove) {
        selectedPiece = game.position[coordinates];
        board.highlight(position);
        _ref1 = legalMoves[coordinates] || [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          move = _ref1[_i];
          _results.push(board.highlight(getPosition(move)));
        }
        return _results;
      }
    });
  });

}).call(this);
